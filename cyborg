#!/usr/bin/env python3

import os
import sys
import re
import argparse
import textwrap
import datetime
import subprocess
import configparser
import socket
from pprint import pprint as pp

try:
    import click
except ModuleNotFoundError:
    class Click:
        def echo(self, msg, **kwargs):
            sys.stdout.write(msg)
        def secho(self, msg, **kwargs):
            sys.stdout.write(msg)
        def style(self, msg, **kwargs):
            return msg
    click = Click()

def log(msg, msg_type='info'):
    dt = datetime.datetime.now()
    timestamp = dt.strftime('%y-%m-%d %X')
    timestamp = click.style(timestamp, fg='blue')
    msg_types = {
        'info':  ['INFO', 'green'],
        'warn':  ['WARN', 'red'],
        'error': [' ERR', 'red'],
        'cmd':   [' CMD', 'yellow'],
    }
    status = msg_types[msg_type][0]
    color = msg_types[msg_type][1]
    status = click.style(status, fg=color, bold=True)
    msg = click.style(msg, fg=color)
    out = f'{timestamp} {status}: {msg}'
    click.secho(out)

def log_error(msg):
    log(msg, msg_type='error')

def log_cmd(msg):
    msg = ' '.join(msg)
    log(msg, msg_type='cmd')

def warn(msg):
    log(msg, msg_type='warn')

def error(msg):
    log_error(msg)
    notify(msg)
    sys.exit(1)

def run_prog(cmd):
    cmd = [i for i in cmd if i]  # remove empty fields
    log_cmd(cmd)
    result = subprocess.run(cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)
    result.stdout = result.stdout.decode('utf-8').strip()
    result.stderr = result.stderr.decode('utf-8').strip()
    return result

def notify(msg):
    notify = '/home/sm/bin/cron-notify-send'
    if not os.path.exists(notify):
        click.secho(f'{notify} does not exist', fg='red', bold=True)
        sys.exit(1)
    title = 'Cyborg'
    cmd = [notify, title, msg]
    result = subprocess.run(cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)

def split_list(data, chunks):
    k, m = divmod(len(data), chunks)
    return (data[i * k + min(i, m):(i + 1) * k + min(i + 1, m)] for i in range(chunks))

def columnize(data):
    import math
    from itertools import zip_longest

    data = [i for i in data.split('\n') if i];

    spaces_between_columns = 2
    spaces = ' ' * spaces_between_columns
    max_word_len = max([len(i) for i in data])
    display_width, _ = click.get_terminal_size()
    columns = int(display_width / (max_word_len + spaces_between_columns))

    backups = len(data)
    chunk_len = math.ceil(backups / columns)
    chunks = []
    for i in range(columns):
        start = i * chunk_len
        end = (i + 1) * chunk_len
        chunks.append(data[start:end])

    columnized = ''
    for row in zip_longest(*chunks, fillvalue=''):
        columnized += spaces.join([i.ljust(max_word_len) for i in row]) + '\n'
    return columnized.strip()


class Borg:
    settings_file = os.path.expanduser('~/.cyborg/config.ini')
    installed_apps = os.path.expanduser('~/.cyborg/installed-apps.txt')
    exclude_list = os.path.expanduser('~/.cyborg/exclude')

    def __init__(self, dry_run=True):
        self.dry_run = '--dry-run'
        if not dry_run:
            self.dry_run = ''

        # load settings file
        settings = self.load_settings()

        # check all file/dir existence
        self.check_file(self.destination)
        self.check_file(self.exclude_list)

    def check_file(self, filename):
        if not os.path.exists(filename):
            error(f'file does not exist: {filename}.')

    def load_settings(self):
        config = configparser.SafeConfigParser(inline_comment_prefixes=('#',))
        try:
            config.read(self.settings_file)
        except configparser.ParsingError as e:
            error(' '.join(str(e).split()))
        try:
            settings = config['settings']
        except KeyError as e:
            error(f'{self.settings_file} does not exist or does not contain a "[settings]" section.')
        try:
            # self.backup_name = settings['backup_name'].strip('"\'')
            destination = settings['destination'].strip('"\'')
            self.remote_destination = settings['remote_destination'].strip('"\'')
        except KeyError as e:
            error(f'Missing key in {self.settings_file}: {e}')
        self.destination = self.fix(destination)

    def fix(self, path):
        path = os.path.expanduser(path)
        # path = os.path.normpath(path)
        return path

    def status(self):
        # check if borg is running
        result = run_prog(['pidof', '-sx', 'borg'])
        if not result.returncode:
            error('Borg already running, wait for it to finish.')

        # show a list of all backup sets
        cmd = ['borg', 'list', '--short', self.destination]
        result = run_prog(cmd)
        print(columnize(result.stdout))
        output = result.stdout

        last_backup = output.split('\n')[-1].split()[0]
        print()
        click.secho('# show more info:', fg='green')
        click.secho(f'borg list {self.destination}', fg='yellow')
        click.secho('# list all files in last backup:', fg='green')
        click.secho(f'borg list {self.destination}::{last_backup}', fg='yellow')
        click.secho('# show details about backup repo:', fg='green')
        click.secho(f'borg info -v {self.destination}', fg='yellow')
        click.secho('# show details about backup repo and the last backup:', fg='green')
        click.secho(f'borg info -v {self.destination}::{last_backup}', fg='yellow')

    def run(self, upload_to_remote=False):
        # check if borg is running
        result = run_prog(['pidof', '-sx', 'borg'])
        if not result.returncode:
            error('Borg already running, aborting this backup.')
        # else:
            # notify('Backup started')

        # generate list of installed applications
        installed_generator = '/home/sm/bin/backup-apps-list'
        try:
            result = run_prog([installed_generator])
        except FileNotFoundError:
            error(f'Installed list generator not found: {installed_generator}')
        with open(self.installed_apps, 'w') as f:
            f.write(result.stdout)
            log(f'Wrote {self.installed_apps}')

        # backup
        dt = datetime.datetime.now()
        timestamp = dt.strftime('%Y-%m-%d__%H-%M')
        archive_name = f'{self.destination}::{socket.gethostname()}__{timestamp}'
        log(f'Starting backup to {archive_name}')
        cmd = ['borg', 'create', self.dry_run, '-v',
               f'--exclude-from={self.exclude_list}',
               '--one-file-system',
               '--compression=zlib,6',
               archive_name,
               os.path.expanduser('~')
        ]
        result = run_prog(cmd)
        if result.returncode == 1:
            warn(result.stderr)
        elif result.returncode == 2:
            errmsg = result.stderr
            # remove the usage info from the error message
            # errmsg = re.sub('(usage.*|\[--.*|ARCHIVE \[.*)', '', errmsg).strip()
            errmsg = errmsg.split('\n')[-1]  # last line of error message
            error(errmsg)
        log('Borg backup successful')
        # notify('Borg backup successful')
        self.prune()
        if upload_to_remote:
            self.rclone()

    def prune(self):
        cmd = ['borg', 'prune', self.dry_run, '-v', self.destination,
               f'--prefix="{socket.gethostname()}__"',
               '--keep-within=10d', '--keep-weekly=4', '--keep-monthly=6', '--keep-yearly=1'
        ]
        result = run_prog(cmd)
        if result.returncode:
            errmsg = result.stderr
            errmsg = errmsg.split('\n')[-1]  # last line of error message
            error(errmsg)
        log('Borg prune successful')

    def rclone(self):
        result = run_prog(['pidof', '-sx', 'rclone'])
        if not result.returncode:
            error('rclone already running, aborting this remote upload.')

        log(f'Starting remote backup to {self.remote_destination}')
        cmd = ['rclone', self.dry_run, 'sync', '-v', self.destination, self.remote_destination]
        result = run_prog(cmd)
        if result.returncode:
            errmsg = result.stderr
            errmsg = errmsg.split('\n')[-1]  # last line of error message
            error(errmsg)
        log('Rclone successful')
        # notify('Rclone successful')

    def extras(self):
        """Print out extra commands that can be copied and pasted to the command line"""
        commands = [
            '# Borg',
            f'borg init --dry-run --encryption=none {self.destination}',
            f'borg restore --dry-run {self.destination}  # CAUTION, restores to cur dir only',
            f'borg break-lock {self.destination}',
            f'borg list {self.destination}',
            f'borg check {self.destination}  # note: takes a long time',
            f'borg mount {self.destination} MOUNTPOINT',
            f'borg umount MOUNTPOINT',
            '',
            '# Rclone',
            f'rclone check {self.destination} {self.remote_destination}',
        ]
        print()
        click.secho('https://borgbackup.readthedocs.io', fg='blue', underline=True)
        click.secho('https://github.com/borgbackup/borg', fg='blue', underline=True)
        click.secho('https://rclone.org', fg='blue', underline=True)
        print()
        for line in commands:
            line = re.sub('(#.*)', click.style('\g<1>', fg='green'), line)
            click.secho(line, fg='yellow')

def init(args):
    try:
        borg = Borg(args.dry_run)
    except AttributeError:
        borg = Borg()

    if args.subparser_name == 'run':
        result = borg.run(args.remote)
        notify('Backup done')
    else:
        result = getattr(borg, args.subparser_name)()



if __name__ == '__main__':
    help_msg = textwrap.dedent('''
    Backup using Borg and Rclone

    https://borgbackup.readthedocs.io
    https://github.com/borgbackup
    https://rclone.org

    Configuration information is pulled from ~/.cyborg/config.ini.
    File exclude info is pulled from ~/.cyborg/exclude

    Required support apps:
    Generate list of installed applications: ~/bin/backup-apps-list
    Gui notifications from cron: ~/bin/cron-nofify-send
    ''')

    parser = argparse.ArgumentParser(
        description=help_msg,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    subparsers = parser.add_subparsers(dest='subparser_name')

    # run
    run = subparsers.add_parser('run', help='Run the backup')
    run.add_argument('-d', '--dry-run', action='store_true')
    run.add_argument('-r', '--remote', action='store_true')

    # status
    status = subparsers.add_parser('status', help='Check the backup')

    # rclone
    rclone = subparsers.add_parser('rclone', help='Use rclone to copy the repo to remote storage')
    rclone.add_argument('-d', '--dry-run', action='store_true')

    # extras
    extras = subparsers.add_parser('extras', help='Output extra commands to be copied and pasted in the terminal')

    args = parser.parse_args()
    init(args)

    'sudo sync; echo 1 | sudo tee /proc/sys/vm/drop_caches'
