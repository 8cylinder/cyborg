#!/usr/bin/env python3

import os
import sys
import re
# import click
import argparse
import textwrap
import datetime
import subprocess
import configparser
import socket
from pprint import pprint as pp


def log(msg, msg_type='info'):
    dt = datetime.datetime.now()
    timestamp = dt.strftime('%y-%m-%d %X')
    msg_types = {
        'info': 'INFO',
        'error': 'ERROR',
        'cmd': 'CMD',
    }
    status = msg_types[msg_type]
    out = f'{timestamp} :: {status} :: {msg}\n'
    sys.stdout.write(out)

def error(msg):
    log(msg, msg_type='error')
    sys.exit(1)

def run_prog(cmd):
    result = subprocess.run(cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)
    # pp(result)
    log(' '.join(cmd), msg_type='cmd')
    if result.stdout:
        log(result.stdout.decode('utf-8').strip())
    if result.stderr:
        error(result.stderr.decode('utf-8').strip())
    return result


class Borg:
    settings_file = '/home/sm/.cyborg.ini'
    def __init__(self, dry_run=True):
        self.dry_run = '--dry-run'
        if not dry_run:
            self.dry_run == ''

        # check if borg is running
        result = run_prog(['pidof', '-s', 'borg'])
        if not result.returncode:
            error('Borg already running')

        # load settings file
        settings = self.load_settings()

        # check all file/dir existence
        self.check_file(self.exclude_list)
        self.check_file(self.destination)

    def check_file(self, filename):
        if not os.path.exists(filename):
            error(f'file does not exist: {filename}')

    def load_settings(self):
        config = configparser.SafeConfigParser(inline_comment_prefixes=('#',))
        try:
            config.read(self.settings_file)
        except configparser.ParsingError as e:
            msg = ' '.join(str(e).split())
            error(msg)
        settings = config['settings']
        try:
            self.backup_name = settings['backup_name'].strip('"\'')
            destination = settings['destination'].strip('"\'')
            exclude_list = settings['exclude_list'].strip('"\'')
            installed_list = settings['installed_list'].strip('"\'')
        except KeyError as e:
            error(e)
        self.destination = os.path.expanduser(destination)
        self.exclude_list = os.path.expanduser(exclude_list)
        self.installed_list = os.path.expanduser(installed_list)

    def status(self):
        # show a list of all backup sets
        cmd = ['borg', 'list', self.destination]
        result = run_prog(cmd)
        output = result.stdout.decode('utf-8').strip()
        last_backup = output.split('\n')[-1].split()[0]
        print()
        # show details on the last backup set
        cmd = ['borg', 'info', '-v', self.destination]
        result = run_prog(cmd)

    def run(self):
        log('starting backup')
        # generate list of installed applications
        result = run_prog(['/home/sm/bin/backup-apps-list'])
        with open(self.installed_list, 'w') as f:
            f.write(result.stdout.decode('utf-8'))
            log(f'wrote {self.installed_list}')

        # backup
        dt = datetime.datetime.now()
        timestamp = dt.strftime('%Y-%m-%d__%H-%M')
        archive_name = f'{self.destination}::{socket.gethostname()}__{timestamp}'
        print(archive_name)

    def rclone(self):
        log('rclone')

    def extras(self):
        """Print out extra commands that can be copied and pasted to the command line"""
        commands = [
            ['init', '--encryption=none', self.destination],
            ['restore', self.destination, '# restores to cur dir'],
            ['break-lock', self.destination],
            ['list', self.destination],
            ['check', self.destination, '# note: takes a long time'],
        ]
        print()
        print('https://borgbackup.readthedocs.io')
        print('https://github.com/borgbackup/borg')
        print()
        [print('borg', i[0], '--dry-run', ' '.join(i[1:])) for i in commands]


def init(args):
    borg = Borg()
    result = getattr(borg, args.subparser_name)()


if __name__ == '__main__':
    help_msg = textwrap.dedent('''
        Backup using Borg

        https://borgbackup.readthedocs.io/en/stable/
        https://github.com/borgbackup''')

    parser = argparse.ArgumentParser(
        description=help_msg,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    subparsers = parser.add_subparsers(dest='subparser_name')

    # run
    run = subparsers.add_parser('run', help='Run the backup')
    run.add_argument('-d', '--dry-run', action='store_true')

    # status
    status = subparsers.add_parser('status', help='Check the backup')

    # rclone
    rclone = subparsers.add_parser('rclone', help='Use rclone to copy the repo to remote storage')
    rclone.add_argument('-d', '--dry-run', action='store_true')

    # extras
    extras = subparsers.add_parser('extras', help='Output extra commands to be copied and pasted in the terminal')

    args = parser.parse_args()
    init(args)

"""
cyborg run [--dry-run]
cyborg rsync [--dry-run]
cyborg status

cyborg init [--dry-run]
cyborg restore [--dry-run] ARCHIVENAME RESTOREPOINT
cyborg break [--dry-run]
cyborg list
cyborg check
"""
