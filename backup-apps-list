#!/usr/bin/env bash

eval "$(~/bin/docopts -V - -h - : "$@" <<EOF

Usage:
  backup-apps-list [<destination>]

This will output to the console (or create a text file at DESTINATION
if specified) that has a list of all installed applications.

----
Version 0.1

EOF
)"

set -o nounset      # cause error if a var is not set
set -o errexit      # exit if there is an error

# include the color variables and an error function
source ~/bin/color_and_error.bash

# echo $destination
if [[ $destination ]]; then
    if [[ ! -e $(dirname "$destination") ]]; then
        error "Destination: $(dirname "$destination") does not exist"
    fi
fi

tmpfile=$(mktemp)

function title
{
    echo >> $tmpfile
	echo "$@" >> $tmpfile
	echo "$(echo "$@" | sed 's/./=/g')" >> $tmpfile
}

function cmd
{
    echo $@ >> $tmpfile
    if which $1 >/dev/null; then
        echo >> $tmpfile
        $@ >> $tmpfile
    fi
}

if [[ $OSTYPE =~ 'darwin' ]]; then
    title 'Installed OSX app store applications'
    cmd parse-osx-application-list

    title 'Brew OSX Applications'
    cmd brew list
fi

if [[ $OSTYPE =~ 'linux' ]]; then
    title 'Apt manualy installed'
    cmd comm -23 \
        <(apt-mark showmanual | sort -u) \
        <(gzip -dc /var/log/installer/initial-status.gz |
                 sed -n 's/^Package: //p' | sort -u) |
        sed '/\(linux-headers\|linux-image\)/d'
fi

title 'Python 2x packages'
cmd pip list

title 'Python 3x packages'
cmd pip3 list

title 'Npm packages'
cmd npm -g list -depth 0

title 'Emacs packages'
cmd ls -ltr ~/.emacs.d/elpa/ | sed '/^-/d'



if [[ $destination ]]; then
    cp $tmpfile $destination
else
    cat $tmpfile
fi

rm $tmpfile
